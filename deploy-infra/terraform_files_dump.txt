
===== ./variables.tf =====
variable "aws_region" {
  default     = "us-east-1"
  description = "AWS region to deploy into"
}

variable "ami" {
  default     = "ami-0c55b159cbfafe1f0" # Ubuntu 22.04 in us-east-1
  description = "AMI ID for EC2"
}

variable "instance_type" {
  default     = "t3.micro"
  description = "EC2 instance type"
}

variable "key_name" {
  description = "SSH key pair name"
  type        = string
}

variable "instance_name" {
  default     = "lms-server"
  description = "Name tag for the EC2 instance"
}

variable "vpc_cidr" {
  default     = "10.0.0.0/16"
  description = "CIDR block for VPC"
}

variable "public_subnet_cidr" {
  default     = "10.0.1.0/24"
  description = "CIDR for the public subnet"
}

variable "instance_role_name" {
  default     = "ec2-lms-role"
  description = "IAM role for EC2 instance"
}

===== ./outputs.tf =====
output "ec2_public_ip" {
  value = module.compute.instance_public_ip
}

output "ssh_access_command" {
  value = "ssh -i ~/.ssh/${var.key_name}.pem ubuntu@${module.compute.instance_public_ip}"
}

===== ./main.tf =====
# -----------------------------------------
# Root main.tf - LMS Production Deployment
# -----------------------------------------

provider "aws" {
  region = var.aws_region
}

module "networking" {
  source = "./modules/networking"
  vpc_cidr = var.vpc_cidr
  public_subnet_cidr = var.public_subnet_cidr
}

module "iam" {
  source = "./modules/iam"
  instance_role_name = var.instance_role_name
}

module "compute" {
  source            = "./modules/compute"
  ami               = var.ami
  instance_type     = var.instance_type
  key_name          = var.key_name
  subnet_id         = module.networking.public_subnet_id
  security_group_id = module.networking.security_group_id
  instance_name     = var.instance_name
  iam_instance_profile = module.iam.instance_profile_name
}



===== ./modules/networking/variables.tf =====
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}

variable "public_subnet_cidr" {
  description = "CIDR block for the public subnet"
  type        = string
}

===== ./modules/networking/outputs.tf =====
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_id" {
  value = aws_subnet.public.id
}

output "security_group_id" {
  value = aws_security_group.sg.id
}

===== ./modules/networking/main.tf =====
# Create VPC
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "lms-vpc"
  }
}

# Create public subnet
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  map_public_ip_on_launch = true

  tags = {
    Name = "lms-public-subnet"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "lms-igw"
  }
}

# Create Route Table for public subnet
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "lms-public-rt"
  }
}

# Associate route table with subnet
resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

# Security Group allowing SSH and HTTP/HTTPS
resource "aws_security_group" "sg" {
  name        = "lms-sg"
  description = "Allow SSH and HTTP/HTTPS inbound"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "lms-sg"
  }
}

===== ./modules/compute/variables.tf =====
variable "ami" {
  description = "AMI ID for EC2 instance"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}

variable "key_name" {
  description = "SSH Key pair name"
  type        = string
}

variable "subnet_id" {
  description = "Subnet ID"
  type        = string
}

variable "security_group_id" {
  description = "Security Group ID"
  type        = string
}

variable "instance_name" {
  description = "Name tag for the EC2 instance"
  type        = string
}

variable "iam_instance_profile" {
  description = "IAM instance profile name"
  type        = string
}

===== ./modules/compute/outputs.tf =====
output "instance_public_ip" {
  value = aws_instance.lms_server.public_ip
}

===== ./modules/compute/main.tf =====
resource "aws_instance" "lms_server" {
  ami                         = var.ami
  instance_type               = var.instance_type
  key_name                    = var.key_name
  subnet_id                   = var.subnet_id
  vpc_security_group_ids      = [var.security_group_id]
  associate_public_ip_address = true

  iam_instance_profile        = var.iam_instance_profile

  user_data                   = file("${path.module}/user-data.sh")

  tags = {
    Name = var.instance_name
  }
}


===== ./modules/iam/variables.tf =====
variable "instance_role_name" {
  description = "Name of the IAM role for the EC2 instance"
  type        = string
}

===== ./modules/iam/outputs.tf =====
output "instance_profile_name" {
  value = aws_iam_instance_profile.ec2_instance_profile.name
}

output "instance_role_arn" {
  value = aws_iam_role.ec2_role.arn
}

===== ./modules/iam/main.tf =====
resource "aws_iam_role" "ec2_role" {
  name = var.instance_role_name

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "ec2_policy_attach" {
  role       = aws_iam_role.ec2_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly" # Allows pulling container images from ECR (optional)
}

resource "aws_iam_instance_profile" "ec2_instance_profile" {
  name = "${var.instance_role_name}-profile"
  role = aws_iam_role.ec2_role.name
}

===== ./providers.tf =====
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  required_version = ">= 1.3.0"
}


